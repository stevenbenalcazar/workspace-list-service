name: 🚀 Deploy Workspace List Service

on:
  push:
    branches:
      - main  # Cambia esto si usas otra rama

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Clonar el repositorio
        uses: actions/checkout@v3

      - name: 🔑 Configurar SSH para EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: ✅ Verificar conexión SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '✅ Conexión SSH exitosa'"

      - name: 🐳 Instalar Docker en EC2 y Configurar el Entorno
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo yum update -y
            sudo yum install -y docker git
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
            newgrp docker
            docker --version
          EOF

      - name: 🛠️ Instalar Docker Compose en EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
          EOF

      - name: 🛠️ Instalar PostgreSQL Client en EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo yum install -y postgresql
            psql --version
          EOF

      - name: 🛠️ Debug SSH y Archivos
        run: |
          ls -la ~/.ssh
          cat ~/.ssh/id_rsa | wc -l  # Verifica que la clave no esté vacía

      - name: 🏗️ Construir y Subir Imagen Docker a Docker Hub
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/workspace-list-service .
          docker tag ${{ secrets.DOCKER_USERNAME }}/workspace-list-service:latest ${{ secrets.DOCKER_USERNAME }}/workspace-list-service:latest
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/workspace-list-service:latest

      - name: 📄 Crear archivo `.env` en EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "DB_HOST=${{ secrets.DB_HOST }}" > ~/workspace-list-service.env
            echo "DB_NAME=workspacedb" >> ~/workspace-list-service.env
            echo "DB_USER=workspace_user" >> ~/workspace-list-service.env
            echo "DB_PASSWORD=workspace123" >> ~/workspace-list-service.env
            echo "JWT_SECRET=supersecretkey" >> ~/workspace-list-service.env
          EOF

      - name: 🚀 Desplegar `workspace-list-service` en EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker stop workspace-list-service || true
            docker rm workspace-list-service || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/workspace-list-service:latest
            docker run -d --name workspace-list-service -p 8001:8001 \
              --network bridge \
              --restart unless-stopped \
              --env-file ~/workspace-list-service.env \
              ${{ secrets.DOCKER_USERNAME }}/workspace-list-service:latest
          EOF
